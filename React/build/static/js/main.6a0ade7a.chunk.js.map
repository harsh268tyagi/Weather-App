{"version":3,"sources":["components/weather.jsx","App.js","reportWebVitals.js","index.js"],"names":["WeatherPage","props","scrollamount","className","onSubmit","load_weather","name","size","value","error","city","id","country","curr_temp","wind_speed","curr_weather","forecasted_data","WeatherApp","state","undefined","query","days","forecasted_day","forecasted_temp","forecasted_weather","render_forecast","getWeather","e","a","preventDefault","target","elements","url","fetch","method","headers","apicall","json","response","console","log","d","setState","forecast","forecastday","day","avgtemp_c","condition","text","current","temp_c","location","wind_kph","message","Fragment","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a0ade7a.chunk.js","sourcesContent":["import React from \"react\";\r\n//import bootstrap from \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nconst WeatherPage = (props) => {\r\n  return (\r\n    <div>\r\n      <marquee scrollamount=\"15\">\r\n        <b className=\"bold\">Welcome! </b> For weather info, Please Select{\" \"}\r\n        <b className=\"bold\">CityName</b> and\r\n        <b className=\"bold\"> Numbers of days</b> to get the information\r\n      </marquee>\r\n      <form className=\"form\" onSubmit={props.load_weather}>\r\n        <select className=\"select\" name=\"city\" size=\"1\">\r\n          <option value=\"London\">London</option>\r\n          <option value=\"Ghaziabad\">Gzb</option>\r\n          <option value=\"Delhi\">Delhi</option>\r\n          <option value=\"Meerut\">Meerut</option>\r\n          <option value=\"Hapur\">Hapur</option>\r\n          <option value=\"Noida\">Noida</option>\r\n          <option value=\"XYZCITY\">XYZ CITY</option>\r\n        </select>\r\n        <select className=\"select\" name=\"days\">\r\n          <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n        </select>\r\n        <br></br>\r\n        <button className=\"submitButton\">Submit</button>\r\n      </form>\r\n\r\n      <div className=\"card\">\r\n        {props.error ? <h1>{props.error}</h1> : null}\r\n        {props.city ? <h1 id=\"cityy\">City: {props.city}</h1> : null}\r\n        {props.country ? <p>Country: {props.country}</p> : null}\r\n        {props.curr_temp ? <p>Current Temperature: {props.curr_temp}</p> : null}\r\n        {props.wind_speed ? <p>Wind Speed: {props.wind_speed}</p> : null}\r\n        {props.curr_weather ? (\r\n          <p>Current Weather: {props.curr_weather}</p>\r\n        ) : null}\r\n        {props.forecasted_data ? <p>{props.forecasted_data}</p> : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default WeatherPage;\r\n","import { render } from \"@testing-library/react\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport WeatherPage from \"./components/weather\";\n// const [pusheddata, setpusheddata] = React.useState([]);\n\nclass WeatherApp extends Component {\n  state = {\n    city: undefined,\n    country: undefined,\n    curr_temp: undefined,\n    wind_speed: undefined,\n    curr_weather: undefined,\n    query: undefined,\n    days: undefined,\n    forecasted_day: undefined,\n    forecasted_temp: undefined,\n    forecasted_weather: undefined,\n    error: undefined,\n  };\n\n  render_forecast = () => {\n    return (\n      <>\n        <p>\n          {this.state.forecasted_day ? (\n            <p>NextDay:{this.state.forecasted_day}</p>\n          ) : null}\n        </p>\n        <p>{this.state.forecasted_weather}</p>\n        <p>{this.state.forecasted_temp}</p>\n      </>\n    );\n  };\n\n  getWeather = async (e) => {\n    e.preventDefault(); // to prevent default function of button\n    const city = e.target.elements.city.value;\n    const days = e.target.elements.days.value;\n\n    const url =\n      \"https://weatherapi-com.p.rapidapi.com/forecast.json?q=\" +\n      city +\n      \"&days=\" +\n      days;\n    const apicall = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-key\": \"6c197cd1fbmshecc3b0b6c3b8dcdp196a49jsnd6a739d34edb\",\n        \"x-rapidapi-host\": \"weatherapi-com.p.rapidapi.com\",\n      },\n    });\n    const response = await apicall.json();\n    console.log(response);\n    try {\n      for (let d = 0; d < days; d++) {\n        this.setState({\n          forecasted_day: [d + 1],\n          forecasted_temp: response.forecast.forecastday[d].day.avgtemp_c,\n          forecasted_weather:\n            response.forecast.forecastday[d].day.condition.text,\n        });\n      }\n      this.setState({\n        curr_temp: response.current.temp_c,\n        city: response.location.name,\n        wind_speed: response.current.wind_kph,\n        country: response.location.country,\n        curr_weather: response.current.condition.text,\n        days: e.target.elements.days.value,\n        error: undefined,\n      });\n    } catch {\n      this.setState({\n        error: response.error.message,\n        city: undefined,\n        country: undefined,\n        curr_temp: undefined,\n        wind_speed: undefined,\n        curr_weather: undefined,\n        query: undefined,\n        days: undefined,\n        forecasted_day: undefined,\n        forecasted_temp: undefined,\n        forecasted_weather: undefined,\n      });\n      console.log(\"error \");\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <WeatherPage\n          city={this.state.city ? this.state.city : null}\n          country={this.state.country}\n          curr_temp={this.state.curr_temp}\n          wind_speed={this.state.wind_speed}\n          curr_weather={this.state.curr_weather}\n          query={this.state.query}\n          days={this.state.days}\n          error={this.state.error}\n          load_weather={this.getWeather}\n          forecasted_data={this.render_forecast()}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default WeatherApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport WeatherApp from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}